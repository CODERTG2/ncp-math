<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard - Mu Alpha Theta</title>
    <link rel="stylesheet" href="/css/mat.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar" id="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <div class="logo-placeholder">
                    <i class="fas fa-infinity"></i>
                </div>
                <span class="nav-title">Mu Alpha Theta</span>
            </div>
            <div class="nav-menu">
                <button class="nav-btn" onclick="window.location.href='/resources'">
                    <i class="fas fa-book"></i>
                    Resources
                </button>
                <button class="nav-btn" onclick="window.location.href='/ai'">
                    <i class="fas fa-robot"></i>
                    AI
                </button>
                <button class="nav-btn active">
                    <i class="fas fa-tachometer-alt"></i>
                    Dashboard
                </button>
                <button class="nav-btn" onclick="window.location.href='/logout'">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="mat-portal">
        <div class="container" style="max-width: 1400px; padding-top: 2rem;">
            <!-- Tutoring Calendar -->
            <div class="modern-calendar-container">
                <!-- Calendar Header -->
                <div class="calendar-header-section">
                    <div class="calendar-title-area">
                        <div class="title-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <div class="title-content">
                            <h1 class="main-title">Tutoring Calendar</h1>
                            <p class="subtitle">Book your math tutoring sessions</p>
                        </div>
                    </div>
                    
                    <!-- User Welcome -->
                    <div class="user-greeting">
                        <span class="greeting-text">Hello, <%= user.firstName %>!</span>
                        <div class="user-avatar">
                            <%= user.firstName.charAt(0).toUpperCase() %>
                        </div>
                    </div>
                </div>

                <!-- Calendar Navigation -->
                <div class="modern-calendar-nav">
                    <button class="nav-button prev" id="prevMonth">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div class="month-display">
                        <h2 id="currentMonth" class="month-text">September 2025</h2>
                    </div>
                    <button class="nav-button next" id="nextMonth">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
                
                <!-- Calendar Grid -->
                <div class="modern-calendar">
                    <div class="calendar-weekdays">
                        <div class="weekday">SUN</div>
                        <div class="weekday">MON</div>
                        <div class="weekday">TUE</div>
                        <div class="weekday">WED</div>
                        <div class="weekday">THU</div>
                        <div class="weekday">FRI</div>
                        <div class="weekday">SAT</div>
                    </div>
                    <div class="calendar-days" id="calendarBody">
                        <!-- Calendar days will be generated by JavaScript -->
                    </div>
                </div>
                
                <!-- Loading State -->
                <div id="loadingIndicator" class="modern-loading" style="display: none;">
                    <div class="loading-spinner"></div>
                    <span>Loading schedule...</span>
                </div>
            </div>

            <!-- Modern Session Details Modal -->
            <div id="sessionModal" class="modern-modal" style="display: none;">
                <div class="modal-backdrop"></div>
                <div class="modern-modal-content">
                    <div class="modal-header-modern">
                        <div class="modal-title-section">
                            <i class="fas fa-clock modal-icon"></i>
                            <h3 id="modalTitle" class="modal-title-text">Tutoring Sessions</h3>
                        </div>
                        <button class="modern-close-btn" id="closeModal">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body-modern" id="modalBody">
                        <!-- Session details will be populated here -->
                    </div>
                </div>
            </div>
            <!-- Quick Stats -->
            <div class="auth-card stats-card" style="margin-top: 2rem;">
                <div class="auth-body">
                    <h3 style="text-align: center;">Quick Stats</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem;">
                        <div class="stat-item" style="text-align: center;">
                            <div class="stat-number">0</div>
                            <div class="stat-label">Sessions Attended</div>
                        </div>
                        <div class="stat-item" style="text-align: center;">
                            <div class="stat-number">0</div>
                            <div class="stat-label">Sessions Signed Up</div>
                        </div>
                        <div class="stat-item" style="text-align: center;">
                            <div class="stat-number">0</div>
                            <div class="stat-label">Hours Tutored</div>
                        </div>
                        <div class="stat-item" style="text-align: center;">
                            <div class="stat-number">
                                <%= Math.floor((Date.now() - new Date(user.createdAt)) / (1000 * 60 * 60 * 24)) %>
                            </div>
                            <div class="stat-label">Days Active</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- JavaScript -->
    <script>
        // Navbar scroll effect
        window.addEventListener('scroll', function() {
            const navbar = document.getElementById('navbar');
            if (window.scrollY > 50) {
                navbar.classList.add('scrolled');
            } else {
                navbar.classList.remove('scrolled');
            }
        });

        // Calendar functionality
        let currentDate = new Date();
        let tutoringSessions = {};
        
        // Initialize calendar
        function initializeCalendar() {
            updateCalendarDisplay();
            loadTutoringData();
        }
        
        // Update calendar display
        function updateCalendarDisplay() {
            const monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];
            
            document.getElementById('currentMonth').textContent = 
                `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
            
            generateCalendarDays();
        }
        
        // Generate calendar days
        function generateCalendarDays() {
            const calendarBody = document.getElementById('calendarBody');
            calendarBody.innerHTML = '';
            
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < startingDayOfWeek; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                calendarBody.appendChild(emptyDay);
            }
            
            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                
                const dateKey = formatDateKey(currentDate.getFullYear(), currentDate.getMonth(), day);
                const sessionsForDay = tutoringSessions[dateKey] || [];
                
                // Check if it's today
                const today = new Date();
                const isToday = day === today.getDate() && 
                               currentDate.getMonth() === today.getMonth() && 
                               currentDate.getFullYear() === today.getFullYear();
                
                if (isToday) {
                    dayElement.classList.add('today');
                }
                
                dayElement.innerHTML = `
                    <div class="day-number">${day}</div>
                    ${sessionsForDay.length > 0 ? `<div class="session-indicator">${sessionsForDay.length} session${sessionsForDay.length > 1 ? 's' : ''}</div>` : ''}
                `;
                
                if (sessionsForDay.length > 0) {
                    dayElement.classList.add('has-sessions');
                    dayElement.addEventListener('click', () => showSessionDetails(dateKey, sessionsForDay));
                }
                
                calendarBody.appendChild(dayElement);
            }
        }
        
        // Format date key for lookup
        function formatDateKey(year, month, day) {
            return `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        }
        
        // Show session details in modal
        function showSessionDetails(dateKey, sessions) {
            const modal = document.getElementById('sessionModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            
            const date = new Date(dateKey);
            const dateString = date.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            
            modalTitle.textContent = `Tutoring Sessions - ${dateString}`;
            
            modalBody.innerHTML = sessions.map(session => {
                const currentUserSignedUp = session.signedUpUsers.includes('<%= user.firstName %> <%= user.lastName || "" %>'.trim());
                
                return `
                <div class="session-card ${session.cancelled ? 'cancelled' : ''}">
                    <div class="session-header">
                        <span class="session-time">${session.time}</span>
                        <span class="session-capacity">${session.signedUp || 0}/${session.maxTutors} tutors</span>
                        ${session.cancelled ? '<span class="cancelled-badge">CANCELLED</span>' : ''}
                    </div>
                    <div class="session-body">
                        <p class="session-room">Room: ${session.room || 'TBD'}</p>
                        ${session.signedUpUsers && session.signedUpUsers.length > 0 ? `
                            <div class="session-participants">
                                <strong>Participants:</strong>
                                ${session.signedUpUsers.map(user => `<span class="participant">${user}</span>`).join('')}
                            </div>
                        ` : '<p class="no-participants">No participants yet</p>'}
                    </div>
                    <div class="session-actions">
                        ${currentUserSignedUp ? 
                            `<button class="signup-btn signed-up" onclick="cancelSessionSignup('${dateKey}', '${session.time}')">
                                Cancel Signup
                            </button>` : 
                            !session.cancelled && (session.signedUp || 0) < session.maxTutors ? 
                                `<button class="signup-btn available" onclick="signUpForSession('${dateKey}', '${session.time}')">
                                    Sign Up
                                </button>` : 
                                session.cancelled ? 
                                    '<button class="signup-btn cancelled">Cancelled</button>' :
                                    '<button class="signup-btn full">Full</button>'
                        }
                    </div>
                </div>
            `;
            }).join('');
            
            modal.style.display = 'flex';
        }
        
        // Load tutoring data from Google Sheets
        async function loadTutoringData() {
            const loadingIndicator = document.getElementById('loadingIndicator');
            loadingIndicator.style.display = 'block';
            
            try {
                const response = await fetch('/api/tutoring-schedule');
                const data = await response.json();
                
                // Process the data into our format
                tutoringSessions = {};
                data.forEach(session => {
                    const dateKey = session.date; // Assuming date is in YYYY-MM-DD format
                    if (!tutoringSessions[dateKey]) {
                        tutoringSessions[dateKey] = [];
                    }
                    tutoringSessions[dateKey].push({
                        time: session.time,
                        maxTutors: parseInt(session.maxTutors),
                        cancelled: session.cancelled === 'Yes',
                        signedUp: session.signedUp || 0,
                        signedUpUsers: session.signedUpUsers || [],
                        room: session.room || 'TBD'
                    });
                });
                
                generateCalendarDays();
            } catch (error) {
                console.error('Error loading tutoring data:', error);
                // Show error message to user
                alert('Error loading tutoring schedule. Please try again later.');
            } finally {
                loadingIndicator.style.display = 'none';
            }
        }
        
        // Sign up for session
        async function signUpForSession(dateKey, time) {
            try {
                const response = await fetch('/api/signup-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        date: dateKey,
                        time: time,
                        userId: '<%= user._id %>',
                        userName: '<%= user.firstName %> <%= user.lastName || "" %>'
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Refresh the data
                    await loadTutoringData();
                    // Update the modal if it's open
                    const modal = document.getElementById('sessionModal');
                    if (modal.style.display === 'flex') {
                        const sessions = tutoringSessions[dateKey] || [];
                        showSessionDetails(dateKey, sessions);
                    }
                    alert('Successfully signed up for the session!');
                } else {
                    alert(result.message || 'Error signing up for session.');
                }
            } catch (error) {
                console.error('Error signing up:', error);
                alert('Error signing up for session. Please try again.');
            }
        }
        
        // Cancel session signup
        async function cancelSessionSignup(dateKey, time) {
            try {
                const response = await fetch('/api/cancel-signup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        date: dateKey,
                        time: time,
                        userId: '<%= user._id %>'
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Refresh the data
                    await loadTutoringData();
                    // Update the modal if it's open
                    const modal = document.getElementById('sessionModal');
                    if (modal.style.display === 'flex') {
                        const sessions = tutoringSessions[dateKey] || [];
                        showSessionDetails(dateKey, sessions);
                    }
                    alert('Successfully cancelled your signup!');
                } else {
                    alert(result.message || 'Error cancelling signup.');
                }
            } catch (error) {
                console.error('Error cancelling signup:', error);
                alert('Error cancelling signup. Please try again.');
            }
        }
        
        // Navigation event listeners
        document.getElementById('prevMonth').addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendarDisplay();
            loadTutoringData();
        });
        
        document.getElementById('nextMonth').addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendarDisplay();
            loadTutoringData();
        });
        
        // Close modal
        document.getElementById('closeModal').addEventListener('click', () => {
            document.getElementById('sessionModal').style.display = 'none';
        });
        
        // Close modal when clicking outside
        document.getElementById('sessionModal').addEventListener('click', (e) => {
            if (e.target.id === 'sessionModal' || e.target.classList.contains('modal-backdrop')) {
                document.getElementById('sessionModal').style.display = 'none';
            }
        });
        
        // Initialize everything when page loads
        initializeCalendar();
    </script>
</body>
</html>
