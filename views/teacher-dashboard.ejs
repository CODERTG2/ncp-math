<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard - Mu Alpha Theta</title>
    <link rel="stylesheet" href="/css/mat.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar" id="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <div class="logo-placeholder">
                    <i class="fas fa-infinity"></i>
                </div>
                <span class="nav-title">Mu Alpha Theta</span>
            </div>
            <div class="nav-menu">
                <button class="nav-btn" onclick="window.location.href='/resources'">
                    <i class="fas fa-book"></i>
                    Resources
                </button>
                <button class="nav-btn" onclick="window.location.href='/ai'">
                    <i class="fas fa-robot"></i>
                    AI
                </button>
                <button class="nav-btn active">
                    <i class="fas fa-tachometer-alt"></i>
                    Dashboard
                </button>
                <button class="nav-btn" onclick="window.location.href='/logout'">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="mat-portal">
        <div class="container" style="max-width: 1400px; padding-top: 2rem;">
            <!-- Tutoring Calendar Management -->
            <div class="modern-calendar-container">
                <!-- Calendar Header -->
                <div class="calendar-header-section">
                    <div class="calendar-title-area">
                        <div class="title-icon">
                            <i class="fas fa-calendar-edit"></i>
                        </div>
                        <div class="title-content">
                            <h1 class="main-title">Tutoring Calendar Management</h1>
                            <p class="subtitle">Manage tutoring sessions and schedules</p>
                        </div>
                    </div>
                    
                    <!-- User Welcome -->
                    <div class="user-greeting">
                        <span class="greeting-text">Hello, <%= user.firstName %>!</span>
                        <div class="user-avatar">
                            <%= user.firstName.charAt(0).toUpperCase() %>
                        </div>
                    </div>
                </div>

                <!-- Calendar Actions -->
                <div class="calendar-actions" style="margin-bottom: 1.5rem;">
                    <button class="auth-button" id="addSessionBtn" style="background: linear-gradient(135deg, #10b981, #059669);">
                        <i class="fas fa-plus"></i>
                        Add Session
                    </button>
                    <button class="auth-button" onclick="window.location.href='/dashboard/teacher/student-hours'" style="background: linear-gradient(135deg, #3b82f6, #2563eb); margin-left: 0.75rem;">
                        <i class="fas fa-chart-bar"></i>
                        Student Hours Tracker
                    </button>
                </div>

                <!-- Calendar Navigation -->
                <div class="modern-calendar-nav">
                    <button class="nav-button prev" id="prevMonth">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div class="month-display">
                        <h2 id="currentMonth" class="month-text">September 2025</h2>
                    </div>
                    <button class="nav-button next" id="nextMonth">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
                
                <!-- Calendar Grid -->
                <div class="modern-calendar">
                    <div class="calendar-weekdays">
                        <div class="weekday">SUN</div>
                        <div class="weekday">MON</div>
                        <div class="weekday">TUE</div>
                        <div class="weekday">WED</div>
                        <div class="weekday">THU</div>
                        <div class="weekday">FRI</div>
                        <div class="weekday">SAT</div>
                    </div>
                    <div class="calendar-days" id="calendarBody">
                        <!-- Calendar days will be generated by JavaScript -->
                    </div>
                </div>
                
                <!-- Loading State -->
                <div id="loadingIndicator" class="modern-loading" style="display: none;">
                    <div class="loading-spinner"></div>
                    <span>Loading schedule...</span>
                </div>
            </div>

            <!-- Session Management Modal -->
            <div id="sessionModal" class="modern-modal" style="display: none;">
                <div class="modal-backdrop"></div>
                <div class="modern-modal-content" style="max-width: 600px;">
                    <div class="modal-header-modern">
                        <div class="modal-title-section">
                            <i class="fas fa-edit modal-icon"></i>
                            <h3 id="modalTitle" class="modal-title-text">Manage Sessions</h3>
                        </div>
                        <button class="modern-close-btn" id="closeModal">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body-modern" id="modalBody">
                        <!-- Session management interface will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Add Session Modal -->
            <div id="addSessionModal" class="modern-modal" style="display: none;">
                <div class="modal-backdrop"></div>
                <div class="modern-modal-content" style="max-width: 500px;">
                    <div class="modal-header-modern">
                        <div class="modal-title-section">
                            <i class="fas fa-plus modal-icon"></i>
                            <h3 class="modal-title-text">Add New Session</h3>
                        </div>
                        <button class="modern-close-btn" id="closeAddModal">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body-modern">
                        <form id="addSessionForm" style="display: grid; gap: 1rem;">
                            <div class="auth-input-group">
                                <label for="sessionDate" class="auth-label">Date</label>
                                <input type="date" id="sessionDate" class="auth-input" required>
                            </div>
                            <div class="auth-input-group">
                                <label for="sessionDay" class="auth-label">Day of Week</label>
                                <select id="sessionDay" class="auth-input" required>
                                    <option value="">Select Day</option>
                                    <option value="Monday">Monday</option>
                                    <option value="Tuesday">Tuesday</option>
                                    <option value="Wednesday">Wednesday</option>
                                    <option value="Thursday">Thursday</option>
                                    <option value="Friday">Friday</option>
                                    <option value="Saturday">Saturday</option>
                                    <option value="Sunday">Sunday</option>
                                </select>
                            </div>
                            <div class="auth-input-group">
                                <label for="sessionTime" class="auth-label">Time</label>
                                <input type="text" id="sessionTime" class="auth-input" placeholder="e.g., 3:15 PM - 4:15 PM" required>
                            </div>
                            <div class="auth-input-group">
                                <label for="sessionRoom" class="auth-label">Room</label>
                                <input type="text" id="sessionRoom" class="auth-input" placeholder="e.g., Room 320" required>
                            </div>
                            <div class="auth-input-group">
                                <label for="sessionMaxTutors" class="auth-label">Max Tutors</label>
                                <input type="number" id="sessionMaxTutors" class="auth-input" min="1" max="20" value="6" required>
                            </div>
                            <button type="submit" class="auth-button" style="margin-top: 1rem;">
                                <i class="fas fa-plus"></i>
                                Add Session
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- JavaScript -->
    <script>
        // Navbar scroll effect
        window.addEventListener('scroll', function() {
            const navbar = document.getElementById('navbar');
            if (window.scrollY > 50) {
                navbar.classList.add('scrolled');
            } else {
                navbar.classList.remove('scrolled');
            }
        });

        // Calendar functionality
        let currentDate = new Date();
        let tutoringSessions = {};
        
        // Initialize calendar
        function initializeCalendar() {
            updateCalendarDisplay();
            loadTutoringData();
        }
        
        // Update calendar display
        function updateCalendarDisplay() {
            const monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];
            
            document.getElementById('currentMonth').textContent = 
                `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
            
            generateCalendarDays();
        }
        
        // Generate calendar days
        function generateCalendarDays() {
            const calendarBody = document.getElementById('calendarBody');
            calendarBody.innerHTML = '';
            
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < startingDayOfWeek; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                calendarBody.appendChild(emptyDay);
            }
            
            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                
                const dateKey = formatDateKey(currentDate.getFullYear(), currentDate.getMonth(), day);
                const sessionsForDay = tutoringSessions[dateKey] || [];
                
                // Check if it's today
                const today = new Date();
                const isToday = day === today.getDate() && 
                               currentDate.getMonth() === today.getMonth() && 
                               currentDate.getFullYear() === today.getFullYear();
                
                if (isToday) {
                    dayElement.classList.add('today');
                }
                
                dayElement.innerHTML = `
                    <div class="day-number">${day}</div>
                    ${sessionsForDay.length > 0 ? `<div class="session-indicator">${sessionsForDay.length} session${sessionsForDay.length > 1 ? 's' : ''}</div>` : ''}
                `;
                
                if (sessionsForDay.length > 0) {
                    dayElement.classList.add('has-sessions');
                    dayElement.addEventListener('click', () => showSessionManagement(dateKey, sessionsForDay));
                } else {
                    // Allow adding sessions to empty days
                    dayElement.addEventListener('click', () => openAddSessionModal(dateKey));
                }
                
                calendarBody.appendChild(dayElement);
            }
        }
        
        // Format date key for lookup
        function formatDateKey(year, month, day) {
            return `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        }
        
        // Show session management interface
        function showSessionManagement(dateKey, sessions) {
            const modal = document.getElementById('sessionModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            
            const date = new Date(dateKey);
            const dateString = date.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            
            modalTitle.textContent = `Manage Sessions - ${dateString}`;
            
            const sessionCards = sessions.map(session => {
                const bgColor = session.cancelled ? '#fef2f2' : 'white';
                const borderColor = session.cancelled ? '#fecaca' : '#e5e7eb';
                const opacity = session.cancelled ? '0.8' : '1';
                
                return `
                <div class="session-management-card" style="
                    background: ${bgColor};
                    border: 1px solid ${borderColor};
                    border-radius: 12px;
                    padding: 1.5rem;
                    margin-bottom: 1rem;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                    opacity: ${opacity};
                ">
                    ${session.cancelled ? '<div style="background: #dc2626; color: white; padding: 0.5rem 1rem; border-radius: 6px; margin-bottom: 1rem; text-align: center; font-weight: 600;"><i class="fas fa-ban"></i> CANCELLED SESSION</div>' : ''}
                    <div class="session-edit-form" id="session-${dateKey}-${session.time.replace(/[^a-zA-Z0-9]/g, '')}">
                        <div style="display: grid; grid-template-columns: 1.5fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                            <div class="auth-input-group">
                                <label class="auth-label">Time</label>
                                <input type="text" class="auth-input session-time" value="${session.time}">
                            </div>
                            <div class="auth-input-group">
                                <label class="auth-label">Max Tutors</label>
                                <input type="number" class="session-number-input session-max-tutors" value="${session.maxTutors}" min="1" max="20">
                            </div>
                        </div>
                        <div style="margin-bottom: 1.5rem;">
                            <div class="auth-input-group">
                                <label class="auth-label">Room</label>
                                <input type="text" class="auth-input session-room" value="${session.room || 'TBD'}">
                            </div>
                        </div>
                        <div style="margin-bottom: 1rem; padding: 1rem; background: #f8fafc; border-radius: 8px;">
                            <strong>Current Participants (${session.signedUp || 0}/${session.maxTutors}):</strong>
                            ${session.signedUpUsers && session.signedUpUsers.length > 0 ? 
                                session.signedUpUsers.map(user => `<span style="display: inline-block; background: white; padding: 0.25rem 0.5rem; margin: 0.25rem; border-radius: 4px; font-size: 0.875rem; border: 1px solid #e5e7eb;">${user}</span>`).join('') : 
                                '<p style="margin: 0.5rem 0 0 0; color: #64748b; font-style: italic;">No participants yet</p>'
                            }
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            ${session.cancelled ? 
                                `<button class="auth-button" style="background: #10b981;" onclick="reactivateSession('${dateKey}', '${session.time}')">
                                    <i class="fas fa-check"></i> Reactivate
                                </button>` :
                                `<button class="auth-button" style="background: #ef4444;" onclick="cancelSession('${dateKey}', '${session.time}')">
                                    <i class="fas fa-ban"></i> Cancel Session
                                </button>`
                            }
                            <button class="auth-button" onclick="updateSession('${dateKey}', '${session.time}', this.closest('.session-edit-form'))">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                    </div>
                </div>
                `;
            }).join('');
            
            modalBody.innerHTML = sessionCards + `
                <div style="margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid #e5e7eb;">
                    <button class="auth-button" style="background: #10b981;" onclick="openAddSessionModal('${dateKey}')">
                        <i class="fas fa-plus"></i> Add Another Session
                    </button>
                </div>
            `;
            
            modal.style.display = 'flex';
        }
        
        // Load tutoring data from Google Sheets
        async function loadTutoringData() {
            const loadingIndicator = document.getElementById('loadingIndicator');
            loadingIndicator.style.display = 'block';
            
            try {
                const response = await fetch('/api/tutoring-schedule');
                const data = await response.json();
                
                // Process the data into our format
                tutoringSessions = {};
                data.forEach(session => {
                    const dateKey = session.date;
                    if (!tutoringSessions[dateKey]) {
                        tutoringSessions[dateKey] = [];
                    }
                    tutoringSessions[dateKey].push({
                        time: session.time,
                        maxTutors: parseInt(session.maxTutors),
                        cancelled: session.cancelled === true || session.cancelled === 'Yes',
                        signedUp: session.signedUp || 0,
                        signedUpUsers: session.signedUpUsers || [],
                        room: session.room || 'TBD'
                    });
                });
                
                generateCalendarDays();
            } catch (error) {
                console.error('Error loading tutoring data:', error);
                alert('Error loading tutoring schedule. Please try again later.');
            } finally {
                loadingIndicator.style.display = 'none';
            }
        }
        
        // Open add session modal
        function openAddSessionModal(dateKey = null) {
            const modal = document.getElementById('addSessionModal');
            const dateInput = document.getElementById('sessionDate');
            const daySelect = document.getElementById('sessionDay');
            
            if (dateKey) {
                dateInput.value = dateKey;
                const date = new Date(dateKey);
                const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                daySelect.value = dayNames[date.getDay()];
            } else {
                // Set to today's date
                const today = new Date();
                dateInput.value = today.toISOString().split('T')[0];
                const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                daySelect.value = dayNames[today.getDay()];
            }
            
            modal.style.display = 'flex';
        }
        
        // Update session
        async function updateSession(dateKey, originalTime, formElement) {
            const newTime = formElement.querySelector('.session-time').value;
            const maxTutors = parseInt(formElement.querySelector('.session-max-tutors').value);
            const room = formElement.querySelector('.session-room').value;
            
            try {
                const response = await fetch('/api/update-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        date: dateKey,
                        time: originalTime,
                        updates: {
                            time: newTime,
                            maxTutors: maxTutors,
                            room: room
                        }
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Session updated successfully!');
                    await loadTutoringData();
                    document.getElementById('sessionModal').style.display = 'none';
                } else {
                    alert(result.message || 'Error updating session.');
                }
            } catch (error) {
                console.error('Error updating session:', error);
                alert('Error updating session. Please try again.');
            }
        }
        
        // Cancel session
        async function cancelSession(dateKey, time) {
            if (!confirm('Are you sure you want to cancel this session? Students will be notified.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/update-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        date: dateKey,
                        time: time,
                        updates: {
                            cancelled: true
                        }
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Session cancelled successfully!');
                    await loadTutoringData();
                    document.getElementById('sessionModal').style.display = 'none';
                } else {
                    alert(result.message || 'Error cancelling session.');
                }
            } catch (error) {
                console.error('Error cancelling session:', error);
                alert('Error cancelling session. Please try again.');
            }
        }
        
        // Reactivate session
        async function reactivateSession(dateKey, time) {
            if (!confirm('Are you sure you want to reactivate this session?')) {
                return;
            }
            
            try {
                const response = await fetch('/api/update-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        date: dateKey,
                        time: time,
                        updates: {
                            cancelled: false
                        }
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Session reactivated successfully!');
                    await loadTutoringData();
                    document.getElementById('sessionModal').style.display = 'none';
                } else {
                    alert(result.message || 'Error reactivating session.');
                }
            } catch (error) {
                console.error('Error reactivating session:', error);
                alert('Error reactivating session. Please try again.');
            }
        }
        
        // Navigation event listeners
        document.getElementById('prevMonth').addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendarDisplay();
            loadTutoringData();
        });
        
        document.getElementById('nextMonth').addEventListener('click', () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendarDisplay();
            loadTutoringData();
        });
        
        // Modal event listeners
        document.getElementById('closeModal').addEventListener('click', () => {
            document.getElementById('sessionModal').style.display = 'none';
        });
        
        document.getElementById('closeAddModal').addEventListener('click', () => {
            document.getElementById('addSessionModal').style.display = 'none';
        });
        
        // Close modals when clicking outside
        document.getElementById('sessionModal').addEventListener('click', (e) => {
            if (e.target.id === 'sessionModal' || e.target.classList.contains('modal-backdrop')) {
                document.getElementById('sessionModal').style.display = 'none';
            }
        });
        
        document.getElementById('addSessionModal').addEventListener('click', (e) => {
            if (e.target.id === 'addSessionModal' || e.target.classList.contains('modal-backdrop')) {
                document.getElementById('addSessionModal').style.display = 'none';
            }
        });
        
        // Add session button
        document.getElementById('addSessionBtn').addEventListener('click', () => {
            openAddSessionModal();
        });
        
        // Add session form submission
        document.getElementById('addSessionForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const date = document.getElementById('sessionDate').value;
            const day = document.getElementById('sessionDay').value;
            const time = document.getElementById('sessionTime').value;
            const room = document.getElementById('sessionRoom').value;
            const maxTutors = parseInt(document.getElementById('sessionMaxTutors').value);
            
            try {
                const response = await fetch('/api/add-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        date: date,
                        day: day,
                        time: time,
                        room: room,
                        maxTutors: maxTutors
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Session added successfully!');
                    await loadTutoringData();
                    document.getElementById('addSessionModal').style.display = 'none';
                    document.getElementById('addSessionForm').reset();
                } else {
                    alert(result.message || 'Error adding session.');
                }
            } catch (error) {
                console.error('Error adding session:', error);
                alert('Error adding session. Please try again.');
            }
        });
        
        // Auto-fill day when date changes
        document.getElementById('sessionDate').addEventListener('change', (e) => {
            const date = new Date(e.target.value);
            const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            document.getElementById('sessionDay').value = dayNames[date.getDay()];
        });
        
        // Initialize everything when page loads
        initializeCalendar();
    </script>
</body>
</html>
